@using CleanArchitectureBlazorServer.Common.Requests
@using CleanArchitectureBlazorServer.Services.AccountHoldersServices
@using CleanArchitectureBlazorServer.Web.Shared
@inject ISnackbar Snackbar
@inject IAccountHoldersService ConnectAccount

<EditForm OnValidSubmit="Submit" Model="request">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            <MudText Color="@Color.Error">@error</MudText>
            <MudTextField @bind-Value="request.FirstName" For="@(() => request.FirstName)" Label="First Name" Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="request.LastName" For="@(() => request.LastName)" Label="Last Name" Variant="Variant.Outlined"></MudTextField>
            <MudDatePicker @bind-Value="Birthday" For="@(() => Birthday)" Label="Birthday" Variant="Variant.Outlined"></MudDatePicker>
            <MudTextField @bind-Value="request.ContactNumber" For="@(() => request.ContactNumber)" Label="Contact Number" Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="request.Email" For="@(() => request.Email)" Label="Email Address" Variant="Variant.Outlined"></MudTextField>            
        </DialogContent>
        <DialogActions>
            <LoadingButton Loading="loading" />
            <MudButton OnClick="Cancel">Close</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? Dialog { get; set; }
    DateTime? Birthday = DateTime.Today;
    CreateAccountHolder request = new();

    string error { get; set; } = "";
    private bool loading;


    void Cancel() => Dialog?.Cancel();

    async Task Submit()
    {
        loading = true;
        error = "";

        try
        {
            request.DateOfBirth = Birthday.Value;
            var response = await ConnectAccount.AddAccountHolderAsync(request);
            if (response.IsSuccessful)
            {
                Snackbar.Add(response.Messages[0], Severity.Success);
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    Snackbar.Add(message, Severity.Error);
                }
            }
            // var model = await CampusesConnect.CreateAsync(Model);
            // Snackbar.Add($"{model.Name} has been added to list.", Severity.Success);
            Dialog?.Close(DialogResult.Ok(response));
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        loading = false;

    }
}
